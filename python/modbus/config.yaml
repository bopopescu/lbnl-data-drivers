modbus:
    ########################### Modbus Settings ####################################
    # UNIT_ID can be defined as a list like below or as a single device id as in the
    # commented out setting
    UNIT_ID: [0x1,0x1,0x1]
    #UNIT_ID: 0x1
    byte_order: big
    word_order: little
    enable_logging: False
    #                          ### Modbus type ###
    # This can be set to 'tcp' or 'serial' and determines the modbus method that
    # the driver will use.  The appropriate settings will be used below and the
    # irrelevant ones will be ignored
    modbus_type: tcp
    #modbus_type: serial

    #                          ### Serial Settings ###
    method: rtu
    stopbits: 1
    bytesize: 8
    parity: E
    serial_port: /dev/ttyUSB0
    baudrate: 19200
    #                          ### Modbus TCP Settings ###
    ip: 127.0.0.1
    tcp_port: 5020
    ########################## Regitser Settings ###################################
    #                          ### OFFSET Regitsers
    # This controls how much will be subtracted from all of the register addresses
    # Some device specs will list the register address as 1, but when being accessed
    # It will actually need to be sent addressed as 0.
    OFFSET_REGISTERS: 0
    #                          ### Target registers ###
    # These registers will be accessed when the get_data() function is called
    # the function will return a dictionary with the data for each register
    # Register names must be unique or data will be overwritten

    #                          ### Coil/Discrete registers ###
    # These registers only need a name and the first value is the
    # register address.
    coil_registers: {status: [0],other_status: [47]}
    discrete_registers: {status_discrete: [0],other_status_discrete: [47]}
    #                          ### Input/Holding registers ###
    # These registers need a unique name (key of dictionary) that is not
    # used in any other type of register. The value of the dictionary is
    # a list. The first value of the list is the register address and the
    # second value is the type. The types that can be specified are listed
    # below.
    # |   Type          | Length (registers) |
    # | ------------- |:------------------:|
    # |        ignore |                  1 |
    # |          8int |                  1 |
    # |         8uint |                  1 |
    # |         16int |                  1 |
    # |        16uint |                  1 |
    # |         32int |                  2 |
    # |        32uint |                  2 |
    # |       32float |                  2 |
    # |         64int |                  4 |
    # |        64uint |                  4 |
    # |       64float |                  4 |

    holding_registers: {
                        signal_strength: [100,32float],
                        temperature: [102,32float],
                        test_count: [104,32int],
                        count: [106,16int],
                        more_counting: [108,32int],
                        unsigned_test: [110,32uint],
                        unsigned_test_count: [112,32uint],
                        unsigned_short_count: [114,16uint],
                        long_integer_test: [116,64int],
                        long_integer_test2: [120,64int]
    }
    input_registers: {
                        signal_strength_input: [100,32float],
                        temperature_input: [102,32float],
                        test_count_input: [104,32int],
                        count_input: [106,16int]
    }
